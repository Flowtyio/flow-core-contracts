// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/FlowFees.cdc (1.341kB)
// ../../../contracts/FlowServiceAccount.cdc (4.582kB)
// ../../../contracts/FlowToken.cdc (7.088kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _flowfeesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x70\x37\x1b\x58\xe2\x20\x6d\xb3\x2e\xc8\x80\x05\x5b\x73\xde\x61\x1f\x67\x46\xa1\x1b\x61\xb6\x14\x48\xb4\xdd\xa1\xc8\x7f\x1f\x24\x59\xae\xbc\x26\x18\x9a\x8b\x60\xeb\xf1\xf1\xf1\xf1\xc5\xb2\x39\x69\xc3\xb0\x6b\xd5\xa3\xdc\xd7\xf4\x5d\xff\x26\x05\x95\xd1\x0d\x2c\x9e\x88\xee\x97\xf7\x77\xab\x7d\xb5\x5c\xd0\x12\x71\x95\x45\x70\xad\xfb\x09\x70\x81\x74\x77\x23\xf6\x2b\xba\xa9\x6e\x97\xf8\xe1\x63\x96\x9d\xda\x3d\x08\xad\xd8\xa0\x08\xf8\x1d\x91\x85\xe7\x2c\x03\x00\x28\x4b\x78\xe8\x48\x31\xf0\x11\x19\xa4\x05\x6a\x24\x33\x1d\xa0\x3f\x92\x02\x76\xcc\x16\xd0\x10\x1c\xe8\xa4\xad\x74\x37\xac\x81\x8f\x04\x15\x11\x74\xd8\xd6\xec\x79\x5c\x13\xf2\x44\x5e\x8d\xfd\x1a\xe1\x39\x36\xba\x55\xbc\x86\x1f\x3b\xf9\xb4\xba\x2d\xde\xd8\xb6\x97\x7c\x3c\x18\xec\x87\xf9\xfe\xdf\xf8\x57\x2c\xb8\xda\xf8\x9b\x91\x1d\xf2\xc0\xe1\x1b\x38\x92\x5a\x8a\x38\x23\x54\xad\x12\x2c\xb5\xf2\x15\x28\x04\x59\x9b\x5b\xaa\xab\x02\x3a\x34\xa1\x6e\x0d\x9f\x47\xeb\xe7\x3f\xbd\x9a\x51\x4e\xd5\xaa\x48\x95\x3b\xd5\x0e\x9b\xee\x34\xe0\x0b\x78\xf6\x15\xee\x57\x13\x87\xf9\x36\xb3\x70\xa2\x7d\xf7\xba\x41\x8a\xde\x63\x8d\x4a\x10\x7c\xf2\xf8\xf9\xf0\x38\x42\x9c\xda\xb9\x17\x3a\x9f\x2a\xd9\xcc\xdc\x59\x8c\x40\xe7\xfb\xd5\x95\x0d\xac\x01\x7d\x7e\x19\xd0\x90\xd5\xad\x11\x04\xdb\x43\x23\x95\xb4\x6c\x90\xb5\x49\xe6\x29\xcb\x71\x71\xc9\xbb\xf4\x7a\x5b\xd7\xba\xb7\x7e\x9f\x38\x21\x61\x3d\x96\xc6\x1c\x5c\xd9\x7c\x6a\x77\x2c\x09\x93\xec\x8c\x6e\x76\x44\xde\xb5\x7f\x63\x70\x79\x19\x89\xf6\xe8\x70\x88\xc7\x66\x36\xfe\x65\x06\x3f\x63\xab\x91\x38\x9c\xc5\x84\x20\xb1\xf5\x75\x20\x2f\x15\x18\xe2\xd6\x28\xd8\xcc\xa6\xf3\x9d\x53\xeb\xa5\x92\x9c\x7b\xb7\xb6\x42\x04\xaa\x6d\xcb\xc7\xe1\xa1\x98\xfa\xff\xc5\x90\x0b\x39\x82\xa2\x3e\xf9\x4a\x84\x69\x51\x1d\xc0\x62\x47\x20\x19\xa4\x02\xcb\xda\xe0\xe3\xa5\xf4\xc4\xf9\x83\x55\xc2\x73\x3e\x34\x27\xfe\x13\xbc\x2d\x2e\x07\x75\x92\x54\x2f\xd8\xf1\x84\xea\x69\x66\xf2\x17\x17\xd2\xc1\xe6\x4e\x5c\xbe\x99\xf9\x77\xef\x81\xf5\x1a\xca\x41\x64\x59\x0d\xeb\xf0\x3c\x31\x9a\xe7\xec\x6f\x00\x00\x00\xff\xff\xa7\x81\x78\xdd\x3d\x05\x00\x00"

func flowfeesCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowfeesCdc,
		"FlowFees.cdc",
	)
}

func flowfeesCdc() (*asset, error) {
	bytes, err := flowfeesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowFees.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0xa0, 0xf3, 0xbf, 0xe0, 0x12, 0x39, 0x5e, 0x7b, 0x1d, 0xe9, 0xa0, 0x2f, 0xa, 0x25, 0x61, 0xd1, 0xcc, 0x62, 0xe2, 0xc1, 0xad, 0x7a, 0xd, 0x5a, 0x6a, 0x8e, 0xd, 0x32, 0x8a, 0x2c, 0xd8}}
	return a, nil
}

var _flowserviceaccountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xcb\x6e\xdb\x38\x17\xde\xfb\x29\x4e\xbb\xf8\x21\x03\x8d\x62\xa4\x4d\x9a\xdf\x88\x5b\xb8\xe9\x64\x30\xbb\x41\xa6\x99\xcd\xa0\x28\x68\xf1\xc8\x22\x22\x93\x06\x49\xd9\x49\x83\xbc\xfb\x80\x37\x99\x94\xac\x3a\x69\xa6\x9b\xd6\x92\xce\xf5\x3b\xf7\xb0\xd5\x5a\x48\x0d\x57\x0d\x5f\xb2\x45\x8d\x5f\xc4\x2d\x72\x28\xa5\x58\xc1\xe4\x0e\xf1\xfc\xe4\xfc\xf4\x6c\x51\x9e\x4c\xf0\x84\x90\xb3\x51\x20\xae\xc5\x36\x21\x9c\x10\x3c\x7d\x5b\x2c\xce\xf0\x6d\xf9\xee\x84\xbc\xff\x7f\x4c\x78\x85\xa8\x5a\x81\xa7\xe4\x7c\xf1\xbe\x3c\x79\x8b\xe7\x8b\xd3\x77\xe7\xe5\x68\xb4\x6e\x16\x50\x08\xae\x25\x29\x1c\xf9\x5f\x28\x37\xac\xc0\x79\x51\x88\x86\x6b\x78\x18\x8d\x00\x00\x0c\x19\x6e\x90\x6b\xf8\x22\x09\x57\xa4\xd0\x4c\xf0\x2b\xc4\x9b\x35\x25\x1a\x69\xc6\xd1\xe8\x99\xc2\xcd\x15\xbb\x3b\x7b\x37\xee\x32\x79\x69\x97\x12\xc9\xcf\x33\x0a\x39\xa7\x14\x69\x46\x92\x77\x53\x98\x53\x2a\x51\xa9\x03\xbc\xd7\xb8\x12\x9b\x83\xdc\xc7\xc7\x30\x87\x92\xdd\x21\x3d\x92\x44\x23\x94\x88\x50\x54\x44\x2e\x91\x82\x16\x80\x77\x58\x34\x1a\x81\x80\xde\xc1\xd0\xaa\xdd\x10\x19\xbf\x8f\xfc\x7a\x92\xf0\xc2\x98\x64\x64\x73\xdc\x82\x37\x33\x91\x4d\x7a\x28\xf6\xe4\x7f\xa9\x10\x6a\xa6\x34\x88\x32\x90\x03\x71\x1e\xa2\x02\x5d\x11\x0d\x15\xd9\x20\xac\x51\xae\x98\x52\x4c\xf0\x58\xb3\x63\x50\x83\x4a\x85\x54\x53\x78\xf0\x88\x4d\xe1\x93\x10\xf5\x63\xab\xfa\x0f\xce\x34\x23\x35\xfb\x8e\x40\x78\xab\x7c\xcb\x74\x05\x24\xca\xd8\xbf\x49\x53\x6b\x20\x9c\x1a\x0d\x35\x53\x15\x14\x64\x4d\x16\xac\x66\x9a\xa1\xca\x5b\xdd\x65\xc3\x81\x71\xa6\x3f\x63\x69\x38\x2c\x73\xf6\xcd\xc8\xd5\x53\x98\x37\xba\xf2\xe1\x1d\xc3\x83\xe5\xf1\x56\x5c\xc6\x20\xee\xd3\xaa\x8c\xfb\x4c\x03\xe3\xa0\xb4\x90\x64\x89\x2d\xbb\x91\x9d\x9b\xef\xd9\xc5\x51\xcb\x9a\x3b\x70\x7e\x5b\xad\xf5\xbd\x95\x92\x8d\xdf\x80\x16\x53\x38\xf6\xec\xc7\x65\x20\xb5\x9f\x7d\x22\x75\xcd\xb1\xce\x16\x3b\x5f\xef\x0d\xee\xba\x42\x6f\x99\x8d\x8c\xe0\xf5\x3d\xe0\xdd\x5a\x28\x54\xb1\x10\x43\x46\x71\x2d\x14\xd3\x06\x16\x9b\x5c\xa0\x2b\x29\x9a\x65\x65\x3f\x5e\x63\x81\x6c\x83\x12\x18\xd7\x28\x4b\x52\x74\x7c\xaa\x19\xbf\xbd\xf8\xdf\xce\x25\xab\xf3\x21\x69\x39\x79\x90\xf1\xf8\x21\x6b\x99\xad\x7e\x67\xf9\xce\xcb\x40\xf8\x26\x21\xd3\x26\x8d\xf5\x20\x2a\x2d\xed\x2f\x82\x67\x41\x6a\xc2\x0b\x84\x92\x61\x4d\x13\x6c\x3e\xf9\x2f\x2f\x80\xc6\x8b\x38\x88\x8c\xa7\xfb\x59\x60\xcc\xbf\xbb\x72\xfa\x1d\xb5\x0f\x7c\xe9\x20\xb0\x79\x1c\xfc\x14\x3c\x2a\xb2\xa4\x66\x68\x54\x2f\xde\xa0\xb6\x6c\xfe\xb4\x06\x87\xc2\x09\xcd\x23\x2a\xa0\x1a\x75\x50\x71\x8d\x25\xcc\x2c\x5f\xe2\x4e\xbe\x44\x7d\xd9\x46\x29\x1b\xc2\x60\xfc\x2a\xe5\x5a\x08\x29\xc5\xf6\xe9\x40\x8f\x5f\xed\xf2\x44\xa2\x6e\x24\x8f\xec\xca\xfd\xcf\x0e\x62\xd7\x8e\x8e\x80\xc4\x12\x25\x1a\x98\x7c\x12\xa5\x18\x6e\xec\xef\xa7\x21\xe8\x2a\x7e\x5f\xdb\x99\x42\xd7\x99\x08\x47\x6f\xb2\xcd\xb0\x01\xd7\x3f\x64\x66\x26\x0f\xb7\x11\xf8\xf8\x11\xd6\x84\xb3\x22\x7b\x7d\xc3\xc9\xa2\xb6\xce\x38\x59\x4f\x72\xf0\x75\x37\xa1\x2e\x49\x5d\x23\x85\x6d\x85\x3c\x9d\x5f\xc0\x14\xa8\x66\xb1\x62\x5a\xbb\x41\x44\x91\x36\x85\xcb\xbe\x12\x31\xf0\xdb\x15\xc2\xbc\x8b\x50\x70\x85\xb9\x63\x66\x5d\x24\x8d\xa0\x74\x63\x38\xd4\xc3\x59\x09\x0a\xeb\x32\x4f\x07\x29\xcc\x66\x3e\x5b\xb3\x49\x4c\xbd\x03\xbb\x7d\xf5\xd8\xfe\x4a\xd2\x5a\xb7\xd0\xc2\xcc\x69\xe8\xc7\xd9\x18\x36\x4e\xb8\x4a\x44\xc7\x73\x71\x14\x49\xc8\xcd\x54\xa3\x92\x6c\x33\xb2\x32\xf6\x4f\xf7\x99\x1c\x75\xba\xb0\x86\xe5\xbe\x8b\xfb\xd0\x5f\x1c\x05\xf1\xdd\x58\x7d\xb6\xc0\x29\x0b\x77\x98\xa4\x85\x1f\xfb\x76\x6d\xb0\xc1\x20\xb0\x26\xf7\x28\x07\x92\xd8\x48\xe8\xef\x5d\xd9\x37\xc7\x74\x10\xff\xfe\xb2\xf1\xac\x18\x3c\x1b\x7b\x6b\xd5\x0b\xc0\xef\xdb\xfb\x92\x00\xb8\x5e\xa2\x40\xcb\x06\x0d\x24\x26\x10\x4b\xb6\x31\xa5\xe3\xb6\x1f\x53\x34\x76\x89\x0a\x45\xd3\xd9\xa1\xde\x40\x49\x6a\x85\x20\x74\x85\x72\xcb\x14\xa6\x8b\x8d\x4a\x97\x53\x53\x14\x61\xab\x0a\x0b\xa9\xdb\xaf\xfa\x4d\xa5\xe7\xad\x90\xea\x1f\xcf\xfd\xd5\x74\x0d\xab\xb8\xe3\x8f\x09\xb6\x90\xec\xbb\xcb\x20\x89\x4a\x34\xd2\xb5\x8f\xa2\x22\x7c\x89\xae\xd8\xcd\xf0\x54\x66\x75\x34\x4f\xe1\x2a\x68\x0d\x6f\xb9\xe6\x74\xc5\x38\x53\x5a\x1a\xdd\xe1\x42\xf0\x8a\x14\xfa\xb4\x8d\x1b\x4c\xe8\x22\x31\x04\x0a\xfb\x8d\xa1\x73\x0c\x74\x72\xac\x7f\x9d\xf4\x9a\x84\x97\x90\xb0\xe1\x8a\x1d\xba\x5a\xdc\xff\xe3\x7d\xe9\x1b\xbb\xb4\xaf\x12\xf7\xf9\xb5\xb7\xea\x9e\xed\xdb\xbe\x02\x1c\xf4\xef\xf0\x81\xf5\x63\x1f\x09\xa5\x2a\x5e\xdb\x43\x96\x13\xf7\xd6\x67\x0f\xd2\x14\x03\x21\x7b\xee\x13\x4a\xfb\xa9\x3d\x70\x72\x3d\x0f\x03\x9b\xe6\xc9\xf3\x57\x98\xd9\x02\xfd\x31\x1c\x43\x67\x63\xfa\x3c\x04\x8c\xb4\x67\xe3\x7f\x83\x8d\x93\xf5\xeb\xe0\xc9\x9d\x82\xec\x16\xef\x87\xdd\x1b\xc0\x68\xe8\x3c\x1e\x46\x29\xc2\xca\xdc\x69\x59\x6c\xef\xde\x09\x0e\x93\x7c\x92\x52\xec\x4d\x71\x43\x35\x4c\x26\xa4\x82\x19\x3c\x74\x06\x0c\x31\x1d\xc9\x8c\x09\xdf\x85\x93\x0e\x95\xed\xac\xb6\x74\x79\x3f\x47\x63\x35\x39\x49\xfe\x22\xd0\xb5\x22\x1c\x88\x56\xd4\x9e\x4b\x30\x84\xc8\x7c\x0e\x53\xe5\x71\xf4\x6f\x00\x00\x00\xff\xff\xe8\x4d\xfa\x00\xe6\x11\x00\x00"

func flowserviceaccountCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountCdc,
		"FlowServiceAccount.cdc",
	)
}

func flowserviceaccountCdc() (*asset, error) {
	bytes, err := flowserviceaccountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0x96, 0x2c, 0xc1, 0x37, 0x30, 0xc6, 0x6d, 0x70, 0xc7, 0x37, 0xbd, 0xdd, 0x58, 0xa8, 0x70, 0x55, 0x27, 0x67, 0xe6, 0x9b, 0x7f, 0xab, 0xe5, 0x40, 0x77, 0x94, 0x5d, 0x4e, 0x88, 0xbe, 0x43}}
	return a, nil
}

var _flowtokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x6f\xdc\xb8\x11\x7f\xf7\xa7\x98\xde\x43\xbb\xc6\xd9\x6b\x23\x68\x83\x83\xe1\xdc\xc5\x69\x13\xe0\x1e\x7a\x28\xae\x69\xfb\x6a\x4a\x9a\xdd\x65\x23\x91\x0b\x92\xda\xf5\x5e\xe0\xef\x5e\xcc\xf0\x8f\x48\xad\xb4\xb6\xcf\x8d\x1f\x12\x4b\x22\xe7\xef\x6f\x66\x7e\xa4\x65\xb7\xd5\xc6\xc1\xa7\x5e\xad\x65\xd5\xe2\x67\xfd\x05\x15\xac\x8c\xee\xe0\xfa\x01\xf1\x87\x37\x3f\xfc\xe5\x6d\xb5\x7a\x73\x8d\x6f\x84\x78\x7b\x76\xb6\xed\x2b\xa8\xb5\x72\x46\xd4\x0e\x3e\xb5\x7a\xcf\xeb\x6f\x46\xdb\xbf\x9e\x9d\x01\x00\x5c\x5d\xc1\x67\xed\x44\x0b\xb6\xdf\x6e\xdb\x03\xe8\x15\x6f\x01\x47\x8b\x2c\x48\x05\xf8\x20\xad\x43\x55\x23\xaf\x27\xe1\x3b\x61\xc0\xd1\xa6\x7f\xf2\x9e\x1b\xf8\xd7\x27\xf9\xf0\xf6\xcf\x49\xe0\xc7\x1d\x2a\x07\x6e\x23\x1c\x48\x0b\xd8\x49\xe7\xb0\x81\xfd\x06\x15\xb8\x0d\x0e\xb6\x49\x0b\xb5\x41\xe1\xb0\x49\xa2\x91\xb7\xb2\x85\xf6\x67\x25\x9d\x14\xad\xfc\x0d\x9b\x85\xf4\xbf\x97\x0a\xcf\x9f\xa5\xd1\x3b\x22\x0c\xc2\x5e\xba\x4d\x63\xc4\x3e\xc4\x4e\xc0\xbf\x45\xdf\xba\x49\xdd\xff\x89\x4b\x17\xa2\xd3\xbd\x72\x51\xe5\x05\x6f\xbd\x81\xbb\xa6\x31\x68\xed\x4f\x2f\x35\xa1\xc1\xad\xb6\x92\xbe\x38\x7d\xd2\x80\xbf\xc5\x85\x47\x06\x38\xfd\x42\xf5\x0a\xf7\xb9\x09\x9d\x54\x73\x11\xff\x3b\x7f\x1a\x69\x7c\xb9\x8b\xd6\x19\x7d\x98\x51\xf1\xa1\x37\xea\xf7\xa9\x10\xec\x08\x5b\x6f\xc0\xa0\xd5\xbd\xa9\x71\x1e\x43\xec\x8b\xf9\xab\xff\xb6\x10\x6d\xab\xf7\xd8\xdc\xfd\x5e\xb5\x15\x99\xfd\x1c\xb5\xec\x5f\x52\x3b\x68\x18\x32\x7d\x75\x95\xb4\x8a\x7a\x03\xbd\x45\x03\xd6\x69\x83\x16\x84\x02\xa9\xac\x13\xaa\x46\x2a\x44\xad\xda\x03\x57\x0c\x6f\xa6\x5a\x74\x1b\x94\x7e\xb5\x58\x63\xaa\xdf\x0d\xc2\xaa\x57\xb5\x93\xda\x57\xec\xb0\x45\xa8\x06\xd6\x7a\x87\x14\x73\xa8\xbc\xb0\xad\x41\x7e\xbf\xd5\xd6\x51\x2d\x36\x92\x37\x46\x69\x52\x8d\x1a\x45\xac\xdb\x03\x67\xb7\x16\x6d\x8b\xcd\x32\xd7\x5d\x6f\xb0\xfe\x62\x61\x23\xb6\x5b\x8a\x97\x03\xd3\x2b\x27\x3b\xe4\x9d\xb8\x43\x03\x22\xd9\xc7\x81\x2b\x44\x44\x49\xbf\x86\xd0\xd2\x77\xe5\x5d\xaf\x30\x06\x39\x7a\x45\xad\x03\x1f\x1c\x05\xa7\xe8\x24\x9c\x39\xb2\x31\x4a\xf3\x40\x5c\x49\xc5\x7b\x2f\xc0\x6a\xfa\x6c\x38\x71\x4a\xc3\x5e\x1c\x60\xa5\xc9\xb0\x4e\xb4\xb2\x96\xba\xb7\x3e\x11\x4e\x07\x95\x3e\x80\x29\x2a\xba\x0f\x4a\xa5\x02\x21\xcd\x12\xee\xc0\x6e\xb1\x96\xa2\x0d\x40\x1b\xa0\xa1\x10\x1b\x4b\x82\xaa\xc1\x04\xa7\x19\xb8\x51\xda\x50\x91\x45\x14\x08\x45\x49\x0c\xeb\x1f\x35\xed\xe5\x3f\x8c\xde\xc9\x06\xcd\xc5\xe8\xfd\xaf\x58\xa3\xdc\x1d\xbf\xff\x20\x5a\x06\x53\x68\xf6\x41\xfd\x46\xb7\x64\xe1\x06\xa1\x0a\xdf\xf5\x0a\x04\x07\xc0\x06\xbb\xd2\xf2\xd8\xef\xc3\xca\xb2\xd7\x27\xc8\xc4\x46\x5d\x08\x25\x24\x44\x6f\x38\xa8\x94\x7f\x02\x46\xda\x4b\x1b\x17\x23\xc9\xe7\xf0\x35\x7d\xa7\x1f\x8b\xed\x6a\x19\x45\xbe\x8b\xc2\xd3\x92\xc7\xc2\x92\xd8\xe1\xb3\x77\xf9\xe7\x4f\x11\x85\x1e\x2f\xe2\x4b\xac\x39\x87\x6b\x82\x29\x77\x07\x10\xfc\x52\x98\x75\xdf\x61\xc8\x59\x44\x95\x6a\x92\x0a\xeb\x85\x84\x3d\x3c\x50\x52\xdd\x2d\xf3\x4d\x3f\xbb\x00\x29\x1b\x7a\x89\x43\x1a\xe7\xc2\x1c\x42\x91\xc6\xb6\xd3\x5b\x8f\x14\x4a\x4f\x2e\x80\xc4\x76\x5a\xe1\x21\xad\xac\x50\xaa\x35\x38\x23\x94\x5d\xa1\x31\xd8\x2c\x49\x8b\x41\xd7\x1b\xe5\x13\xab\x70\xdf\x1e\x72\x21\xb1\x90\x82\x4a\x5d\x94\x13\xcb\xf5\x65\x49\x95\x22\x1d\xd7\x60\x95\x8d\xab\x5c\x14\xb6\x16\xf7\x54\x4c\xcb\xa9\x30\x13\x60\x56\xbd\x4a\x71\x1a\xb7\xfa\x1b\x78\x5f\x62\xd4\x5b\x74\x32\xe9\xc5\xe3\x65\x88\x79\xb1\x81\x5a\xf6\xec\xe8\xf6\xff\xc7\xd1\xcd\xc2\xf4\x5e\xa1\xf9\x69\x29\xfc\x1c\x3d\x2f\x64\xf9\x38\xc2\xed\x65\xde\x09\x06\x98\x7a\x69\xe7\x33\x08\x0c\x11\x7b\x09\x00\x43\x4e\x74\xf5\x5f\xac\xc7\xe8\x63\xc8\x89\xa6\xb1\x45\xbd\x39\x9b\x8a\x2c\x64\x32\x2b\x64\x7a\x64\xf7\xec\x34\x18\xa5\x85\x30\x0d\x69\x73\x98\xd6\xbc\xcb\x92\x42\x6f\x4c\x85\xb5\xe8\x2d\x0e\x90\x2e\xaa\x8c\x6c\xcc\x60\x4c\x80\x45\x13\x75\x87\xc6\xc6\xa3\x81\xb7\xfe\x69\xb0\x76\x23\x0a\x47\x2a\x44\x45\x20\xb4\x7d\x87\x0d\xbb\xca\x4d\x7a\xa5\x79\xd0\x04\x04\x06\x36\xb1\x3c\x42\x58\x08\xf5\xc2\xa7\x75\x0a\x55\xe3\x5e\xd2\xa2\x83\x1d\xfb\x77\x7b\x19\x38\xa0\xfd\x03\xbc\x4f\x1c\x79\x59\xba\xfa\x14\x12\xbf\xf7\xc2\x96\xe3\x9e\x34\x02\xe4\x31\x95\x2b\xb6\x79\x46\xf7\x24\x2a\x8b\x3d\xf0\x0e\xae\x97\xd7\xc5\xf7\x98\xc8\x5d\xe1\x42\x06\xce\xb0\x60\x31\x0e\xca\xe0\x7d\xc6\xe9\xe1\xdd\xcc\xfb\xcb\x22\x04\x99\x9e\x4c\x5b\x6a\x37\x1f\xbb\xad\x3b\x4c\x31\x9f\xb2\x0e\xca\xf6\xe8\x01\x48\xed\x03\x44\x8e\xeb\xdf\xd0\xe8\x34\xde\x55\x93\xda\x9d\x1c\xda\x99\x68\x5b\x6a\x8c\xa1\xad\xd1\x90\xe6\xa1\xde\xf5\xd6\xb7\x37\x9a\xdf\x36\x71\x91\x5c\x18\x13\x30\x16\xe2\xc5\xa6\x4e\x39\x26\x5d\xf4\x42\x9b\xc6\x53\x05\xae\x23\xff\x3d\x09\xab\x6b\x1e\x08\x7e\xfe\x8b\xaa\xe5\x12\x35\x7e\x3e\x47\xc8\xda\xc0\x25\xc2\xb4\x05\x77\xd8\xe2\x11\x13\x20\x88\x8f\xc3\xb8\x78\xba\x7d\x3e\xd1\xbd\xae\x97\xd7\xe7\x79\xae\x0a\xce\x71\xd7\x74\x52\x49\xeb\x8c\x70\xda\x64\x32\x53\x42\x7f\xc1\xbd\xa7\x3b\xcf\xea\x6f\x29\xaf\x59\xb6\x26\x59\xfc\xa9\x39\x32\x52\x3c\xc3\xe4\x6f\xe0\x7d\xe0\x61\x5f\x8f\xcb\xf0\xe4\x51\xa0\x78\x3c\x3d\x08\xa6\x2d\x98\x11\x50\x8e\x85\xe4\x85\x3f\x1f\xbc\x32\x7c\xa3\xd3\xc8\xb3\xc2\xe7\x15\x33\x80\xfc\xaf\x53\x91\x1a\x9f\x5e\x4e\x45\x23\x0a\x9c\xed\x01\x19\x52\x8e\x69\x7e\x1c\x77\x7e\x10\x72\x15\x08\x42\x5f\x2c\x20\x7f\x0c\xa0\xc9\x12\xc9\xf3\xb3\x58\x73\x02\xc1\x98\x40\x05\x9e\x46\x75\xe7\x8f\xaa\xf1\xc8\x10\xb1\x58\x8e\xc5\xc4\xd6\x21\xe3\xc0\x93\xd0\x2b\x34\xd1\xb6\xcf\x25\x81\x3e\x95\x61\x5a\x6e\x33\xbf\x2e\x78\xd4\x93\x55\x5d\xec\x69\x2e\xbb\x9c\xb9\x18\x73\xd1\x8c\xf1\x75\x73\x4d\xf0\x14\x38\x06\x73\xa7\x58\x5a\x39\x15\x47\x70\xa1\x53\x64\xf9\x86\x7e\x42\x94\x7f\x0c\x62\x16\xd7\xe7\x37\xf0\x9d\x8f\x57\xb8\x77\xf0\xcd\xb8\x42\x58\x33\x8a\x0c\x05\x42\x71\x6f\xff\x6e\x4e\xda\x6d\x18\xbb\xa3\xf0\xcf\xc8\x6d\xd1\x5a\x2f\x94\xd3\x1e\x52\xea\x45\x95\x2a\x1e\x5f\x31\x06\xbf\x9f\x22\xa1\xc7\x56\xc2\x94\xe9\x4f\x32\xd8\xd1\x35\xcc\x98\x70\xc2\xab\x38\x2a\x9f\xb9\xa6\x9b\xe8\x14\x09\x1f\xbb\x53\x3c\x1f\x95\x3e\xfd\x1b\x2b\x3d\xeb\x74\xaf\x2d\x7f\xea\x77\x4f\x96\x7e\xea\x6a\x05\xc3\xec\x8d\x7a\x41\x41\x06\x8e\x34\x90\xf2\x78\x1d\x73\x01\xb8\x5a\x61\xed\xe4\x0e\xdb\x03\x4b\xe5\x13\xd8\x40\x77\x67\xc4\xff\xa2\x1d\xde\x78\x86\xee\x59\x45\x76\x51\x26\x7a\xa7\x3b\xe1\x24\x55\xec\x01\x6c\x5f\xf1\x5d\x06\x36\xc3\x61\xb2\x68\x62\xf9\x2d\x6d\x71\xc9\xc3\x46\xf7\xb5\xd3\xe6\x64\xb1\x0f\xa1\xf8\xb6\x8c\x99\xb6\x88\x08\x97\x79\x82\x3c\xcd\x57\x47\x95\x30\xba\x2d\x3c\x86\x75\x06\x6e\x0f\x6c\x02\xd1\x9d\xc7\xd0\x0d\xdc\xf5\x6e\x13\x1e\x72\xc7\x18\xd8\x65\x95\x13\x9b\xce\xa3\xed\x47\x60\x16\x64\xe6\xa3\xe3\x86\x9c\x8d\x13\x26\x91\x62\x87\x44\x47\xa5\x2a\xae\xe8\x46\xf9\x28\x42\x3a\x5d\xbe\x63\x03\x07\x8f\x73\xff\x96\xa4\x6f\x71\x7b\xc9\xc2\xfc\x29\xe2\x2a\xe8\xbd\x5a\xc5\x04\xf9\xac\x4e\xf9\x26\x08\x19\xad\xac\xa1\x16\x5b\x51\xc9\x56\xba\x43\x9c\x21\xcc\x86\x9b\xfc\x7a\x82\xef\xe3\xf0\x61\xab\x2d\xda\xf1\x68\xbd\x0f\xac\xf6\x1e\x3a\x74\x1b\x4d\x87\x38\xa3\xfb\xb5\x0f\xd7\x7d\xbc\x9a\xba\xe7\x6b\x16\xb3\x12\xd3\x7c\xa5\x70\xac\x95\xea\xcb\xed\x1f\x47\x20\xfb\x3a\x7d\xe5\xf5\xf8\xe3\xa2\x40\xcf\x95\xf7\x6a\x88\x40\xba\x1b\x2b\x96\x39\x61\xd6\xe8\x66\x23\x96\xd6\x7e\xe3\xd0\x85\x94\xdf\xc3\x4a\x62\x3b\x8a\xdc\x87\xf8\xed\xff\x1b\xb8\x20\xf6\xc9\xb8\x85\x75\xaf\x0e\x1b\xf7\x03\xee\xed\x03\xde\x8b\x83\xc6\xe2\x34\xbc\xf9\xdd\x1c\xbc\x59\x50\x99\xa3\x8f\xd4\x3e\x84\x0a\xf7\xf1\x9c\x02\xbb\xd1\xfb\x8c\xf1\xa5\x6b\xe3\xbd\xb0\xd9\xe5\xe5\x70\xc9\x95\x75\xa0\x13\x7f\x84\x9a\xae\xd2\xc7\xb3\xc7\xb3\xff\x05\x00\x00\xff\xff\xd6\xaa\xbd\xfc\xb0\x1b\x00\x00"

func flowtokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenCdc,
		"FlowToken.cdc",
	)
}

func flowtokenCdc() (*asset, error) {
	bytes, err := flowtokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x22, 0xe3, 0x88, 0x7b, 0x6e, 0xa0, 0x3a, 0xb5, 0x76, 0x7f, 0x33, 0xe2, 0x22, 0xb, 0xff, 0x84, 0x28, 0x29, 0xfa, 0x7e, 0x81, 0x16, 0x2c, 0x8e, 0x8f, 0x8a, 0x84, 0xec, 0x60, 0x33, 0x52}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FlowFees.cdc":           flowfeesCdc,
	"FlowServiceAccount.cdc": flowserviceaccountCdc,
	"FlowToken.cdc":          flowtokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FlowFees.cdc":           &bintree{flowfeesCdc, map[string]*bintree{}},
	"FlowServiceAccount.cdc": &bintree{flowserviceaccountCdc, map[string]*bintree{}},
	"FlowToken.cdc":          &bintree{flowtokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
